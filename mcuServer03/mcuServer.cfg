//   ======== tcpEcho.cfg ========
/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/*Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name. */
Defaults.common$.namedModule = false;

/*Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit(). */
System.maxAtexitHandlers = 2;

/*Comment this line to allow Error, Assert, and Log strings to be
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.*/
Text.isLoaded = false;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 128;
System.SupportProxy = SysMin;

/* Enable Semihosting for GNU targets to print to CCS console */
//if (Program.build.target.$name.match(/gnu/)) {
//    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
//}

// ================ BIOS configuration ================ 
// Disable unused BIOS features to minimize footprint.
BIOS.libType = BIOS.LibType_Debug;
BIOS.swiEnabled = true;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;
//BIOS.runtimeCreatesEnabled = false;

//BIOS.heapSize = 20480;					//decimal 0x7710 ROV says 6570 free
BIOS.heapSize = 10000;					//
Task.idleTaskStackSize = 768;
Program.stack = 2048;						//System stack size (used by ISRs and Swis) 

// Reduce the number of task priorities 
//Task.numPriorities = 4;
Task.numPriorities = 12;




/* ================ NDK configuration ================ */
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Ip        = xdc.useModule('ti.ndk.config.Ip');
var Udp       = xdc.useModule('ti.ndk.config.Udp');
var Tcp       = xdc.useModule('ti.ndk.config.Tcp');

Global.IPv6 = false;
Global.stackLibType = Global.MIN;

Global.pktNumFrameBufs = 10;
Global.memRawPageCount = 6;
Global.ndkThreadStackSize = 1536;
Global.lowTaskStackSize = 1024;
Global.normTaskStackSize = 1024;
Global.highTaskStackSize = 1024;
Tcp.transmitBufSize = 1024;
Tcp.receiveBufSize = 1024;

// ========  EMAC
//var EMAC = xdc.useModule('ti.drivers.EMAC');

//var GPIO = xdc.useModule('ti.drivers.GPIO');
//GPIO.libType = GPIO.LibType_NonInstrumented;
Ip.autoIp = false;
Ip.address = "10.1.1.99";
Ip.mask = "255.255.255.0";
Ip.gatewayIpAddr = "10.1.1.1";
// ======== end EMAC

/* ================ Driver configuration ================ */
//var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');

//var GPIO = xdc.useModule('ti.drivers.GPIO');


//var SPI = xdc.useModule('ti.drivers.SPI');



/* ================ Task configuration ================ */
// tcpHandlerFxn()   Main processing loop - (high priority)
// max priority must be <= 7 to avoid NDK conflicts, even so, bind() fails for priority >=5
var tcpHandlerParams = new Task.Params();
tcpHandlerParams.instance.name = "tcpHandlerFxn";
tcpHandlerParams.priority = 3;
tcpHandlerParams.stackSize = 1024;
Program.global.tcpHandler = Task.create("&tcpHandlerFxn", tcpHandlerParams);

// idle function
Idle.idleFxns[0] = "&idleFxn";

Defaults.common$.memoryPolicy = xdc.module("xdc.runtime.Types").DELETE_POLICY;

BIOS.rtsGateType = BIOS.GateHwi;
Clock.tickSource = Clock.TickSource_TIMER;


/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useEMAC = true;
TIRTOS.useGPIO = true;
TIRTOS.useSPI = true;



BIOS.customCCOpts = "--endian=little -mv7M3 --abi=eabi -q -ms  --program_level_compile -g";
